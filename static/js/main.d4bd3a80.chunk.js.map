{"version":3,"sources":["design/components/atoms/navbar/navbar.tsx","infrastructure/dto/json.dto.ts","domain/entities/issue.model.ts","domain/entities/sprint.model.ts","presentation/pages/home/views/form-home.tsx","presentation/pages/home/views/select-sprint-home.tsx","presentation/pages/home/home.tsx","presentation/pages/home/views/table-home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","StatFieldID","PriorityName","Name","ColorName","Key","TypeName","IssueModel","id","key","summary","type","this","Icons","SprintModel","name","issues","issue","push","TransforJira","dto","sprints","forEach","issuesIds","data","filter","includes","newIssue","typeName","addIssue","error","FormHomeView","onChange","useState","value","setValue","setError","mb","isInvalid","placeholder","rows","e","inputValue","target","colorScheme","size","style","marginTop","onClick","JSON","parse","sprintsDto","transfor","color","SelectSprintHome","onSelect","spacing","map","sprint","as","MdCheckCircle","Step","TableHome","selectedIssues","setIssues","width","onChangeCapture","find","getIssues","length","variant","href","url","src","icon","alt","Home","form","step","setStep","setSprints","selectSprint","table","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4bd3a80.chunk.js","sourcesContent":["import React from 'react';\nimport './navbar.scss';\n\nexport default function Navbar() {\n\n    return (\n        <>\n            <div className=\"navbar\">\n                <div className=\"navbar__title\">Pre plannig generator</div>\n            </div>\n        </>\n    );\n}","import { IssueModel } from \"../../domain/entities/issue.model\";\nimport { SprintModel } from \"../../domain/entities/sprint.model\";\n\nexport interface JiraData {\n  issues: Issue[];\n  rankCustomFieldId: number;\n  sprints: Sprint[];\n  supportsPages: boolean;\n  projects: Project[];\n  canManageSprints: boolean;\n  complexQuery: boolean;\n  canCreateIssue: boolean;\n  versionData: VersionData;\n  hasBulkChangePermission: boolean;\n  isIssueLimitExceeded: boolean;\n  issueParentAssociations: any[];\n}\n\nexport interface Issue {\n  id: number;\n  key: string;\n  hidden: boolean;\n  typeName: TypeName;\n  typeId: string;\n  summary: string;\n  typeUrl: string;\n  priorityUrl: string;\n  priorityName: PriorityName;\n  done: boolean;\n  assignee?: string;\n  assigneeKey?: string;\n  assigneeAccountId?: string;\n  assigneeName?: string;\n  avatarUrl?: string;\n  hasCustomUserAvatar: boolean;\n  flagged: boolean;\n  estimateStatisticRequired: boolean;\n  estimateStatistic: EstimateStatistic;\n  statusId: string;\n  statusName: Name;\n  statusUrl: string;\n  status: Status;\n  fixVersions: any[];\n  projectId: number;\n  linkedPagesCount: number;\n  epic?: string;\n  epicField?: EpicField;\n}\n\nexport interface EpicField {\n  id: string;\n  label: string;\n  editable: boolean;\n  renderer: string;\n  issueId: number;\n  epicKey: string;\n  epicColor: string;\n  text: string;\n  canRemoveEpic: boolean;\n}\n\nexport interface EstimateStatistic {\n  statFieldId: StatFieldID;\n  statFieldValue: StatFieldValue;\n}\n\nexport enum StatFieldID {\n  Customfield10023 = \"customfield_10023\",\n}\n\nexport interface StatFieldValue {\n  text: string;\n  value?: number;\n}\n\nexport enum PriorityName {\n  Media = \"Media\",\n}\n\nexport interface Status {\n  id: string;\n  name: Name;\n  description: string;\n  iconUrl: string;\n  statusCategory: StatusCategory;\n}\n\nexport enum Name {\n  EnProgreso = \"En Progreso\",\n  Finalizado = \"Finalizado\",\n  NoIniciado = \"No Iniciado\",\n  ReadyForTest = \"Ready for Test\",\n  Test = \"Test\",\n}\n\nexport interface StatusCategory {\n  id: string;\n  key: Key;\n  colorName: ColorName;\n}\n\nexport enum ColorName {\n  BlueGray = \"blue-gray\",\n  Green = \"green\",\n  Yellow = \"yellow\",\n}\n\nexport enum Key {\n  Done = \"done\",\n  Indeterminate = \"indeterminate\",\n  New = \"new\",\n}\n\nexport enum TypeName {\n  Error = \"Error\",\n  Historia = \"Historia\",\n  Mejora = \"Mejora\",\n  Tarea = \"Tarea\",\n}\n\nexport interface Project {\n  id: number;\n  key: string;\n  name: string;\n  isSimplified: boolean;\n}\n\nexport interface Sprint {\n  id: number;\n  sequence: number;\n  name: string;\n  state: string;\n  linkedPagesCount: number;\n  goal: string;\n  startDate: string;\n  endDate: string;\n  isoStartDate: string;\n  isoEndDate: string;\n  completeDate: string;\n  isoCompleteDate: string;\n  canUpdateSprint: boolean;\n  remoteLinks: any[];\n  daysRemaining: number;\n  timeRemaining?: TimeRemaining;\n  issuesIds: number[];\n}\n\nexport interface TimeRemaining {\n  text: string;\n  isFuture: boolean;\n}\n\nexport interface VersionData {\n  versionsPerProject: VersionsPerProject;\n  canCreateVersion: boolean;\n}\n\nexport interface VersionsPerProject {}\n\nexport class TransforJira {\n  static transfor(dto: JiraData): SprintModel[] {\n    try {\n      const sprints: SprintModel[] = [];\n      dto.sprints.forEach(({ id, name, issuesIds }) => {\n        const data = new SprintModel(id, name);\n        dto.issues\n          .filter((issue) => issuesIds.includes(issue.id))\n          .forEach((issue) => {\n            const newIssue = new IssueModel(issue.id, issue.key, issue.summary, issue.typeName);\n            data.addIssue(newIssue);\n          });\n\n        sprints.push(data);\n      });\n      return sprints;\n    } catch (error) {\n        throw error;\n    }\n  }\n}\n","\nexport class IssueModel {\n\n    constructor(\n        public id: number,\n        public key: string,\n        public summary: string,\n        public type: string,\n    ) {}\n\n\n    get url(): string {\n        return `https://jira.lima.bcp.com.pe/browse/${this.key}`;\n    }\n\n    get icon(): string {\n        return `/images/${Icons[this.type]}`;\n    }\n}\n\nexport const Icons: { [name: string]: string }  = {\n    'Tarea': 'tarea.svg',\n    'Test Execution': 'test-execution.png',\n    'Historia': 'story.svg',\n    'Congelamiento': 'tarea.svg',\n    'Ratificación': 'tarea.svg',\n    'Business Story': 'business-story.svg',\n    'Error': 'error.svg',\n    'Error en producción': 'error.svg',\n    'Spike': 'spike.svg',\n    'Riesgo': 'riesgo.svg',\n    'Incidente': 'incidente.svg',\n    'Request': 'request.svg',\n    'Feature': 'request.svg',\n    'Test': 'test.png',\n    'Test Set': 'test-set.png',\n    'Pre-Condition': 'pre-condition.png',\n    'Test Plan': 'test-plan.png',\n\n};","import { IssueModel } from \"./issue.model\";\n\n\n\nexport class SprintModel {\n    \n    private issues: IssueModel[] = []; //TODO: colocar la verdadera instancia de issue\n\n    constructor(\n        public id:number,\n        public name: string\n    ) {}\n\n\n    addIssue(issue: IssueModel) {\n        this.issues.push(issue);\n    }\n\n    getIssues() {\n        return this.issues;\n    }\n}","import React, { useState } from 'react';\nimport { Textarea, Text } from \"@chakra-ui/react\"\nimport { Button } from \"@chakra-ui/react\"\nimport { SprintModel } from '../../../../domain/entities/sprint.model';\nimport { TransforJira } from '../../../../infrastructure/dto/json.dto';\n\n\nexport default function FormHomeView({onChange}: any) {\n\n    let [value, setValue] = useState('');\n    const handleValue = (e: any) => {\n        let inputValue = e.target.value\n        setValue(inputValue)\n    }\n\n    let [error, setError] = useState('');\n\n    const handleContinue = () => {\n        try { \n            const data = JSON.parse(value);\n            const sprintsDto: SprintModel[] = TransforJira.transfor(data);\n            onChange(sprintsDto)\n        } catch (e) {\n            setError('El json ingresado no es valido')\n        }\n    }\n\n    return (\n        <div className=\"form\">\n             <Text mb=\"15px\">Ingrese el json de jira:</Text>\n              <Textarea isInvalid={!!error}  placeholder=\"Ingresa aqui tu json\" rows={10}\n              value={value}\n              onChange={handleValue}\n              />\n              <Button colorScheme=\"blue\" size=\"lg\" style={ {marginTop: 20}} onClick={handleContinue} >\n                Continuar\n            </Button>\n            { error && <Text color=\"red\">{error}</Text>}\n          </div>\n    );\n}","import React from 'react';\nimport { Text, Link } from \"@chakra-ui/react\"\nimport { List, ListItem, ListIcon } from \"@chakra-ui/react\"\nimport { MdCheckCircle} from \"react-icons/md\";\nimport { SprintModel } from '../../../../domain/entities/sprint.model';\n\n\nexport default function SelectSprintHome({ sprints ,onSelect}: Props) {\n\n    return (\n        <div className=\"form\">\n                    <Text mb=\"15px\">Selecione el sprint</Text>\n                    <List spacing={3}>\n                    { sprints.map((sprint: SprintModel) => (\n                        <ListItem key={sprint.id}>\n                        <ListIcon as={MdCheckCircle} color=\"green.500\" />\n                          <Link onClick={ () => onSelect(sprint)}>{ sprint.name }</Link>\n                        </ListItem>\n                    ))}\n                    </List>\n                </div>\n    );\n}\n\ninterface Props {\n    sprints: SprintModel[];\n    onSelect: Function;\n}","import React, { useState } from \"react\";\nimport Navbar from \"../../../design/components/atoms/navbar/navbar\";\nimport \"./home.scss\";\nimport { SprintModel } from \"../../../domain/entities/sprint.model\";\nimport { IssueModel } from \"../../../domain/entities/issue.model\";\nimport FormHomeView from \"./views/form-home\";\nimport SelectSprintHome from \"./views/select-sprint-home\";\nimport TableHome from \"./views/table-home\";\n\nexport enum Step {\n    form,\n    selectSprint,\n    table\n}\n\nexport default function Home() {\n\n    let [step, setStep] = useState(Step.form);\n    let [sprints, setSprints] = useState<SprintModel[]>([]);\n    let [issues, setIssues] = useState<IssueModel[]>([]);\n\n    const handleContinue = (sprintsDto: SprintModel[]) => {\n        setSprints(sprintsDto);\n        setStep(Step.selectSprint);\n    }\n\n    const handleSelectSprint = (sprint: SprintModel) => {\n        setIssues(sprint.getIssues());\n        setStep(Step.table);\n\n    }\n  return (\n      <div className=\"home\">\n        <div className=\"home__navbar\">\n          <Navbar></Navbar>\n        </div>\n        <div className=\"home__content\">\n          {\n              (step === Step.form && \n                <FormHomeView onChange={handleContinue}/>\n              ) ||\n              ( step === Step.selectSprint &&\n                <SelectSprintHome sprints={sprints} onSelect={handleSelectSprint}/>\n              ) ||\n              ( step === Step.table &&\n                <TableHome issues={issues} sprints={sprints}/>\n              ) \n          }\n        </div>\n      </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Text, Link, Table, Tbody, Td, Th, Thead, Tr, Select } from \"@chakra-ui/react\"\nimport { IssueModel } from '../../../../domain/entities/issue.model';\nimport { SprintModel } from '../../../../domain/entities/sprint.model';\n\nexport default function TableHome({issues, sprints}: Props) {\n\n    const [ selectedIssues, setIssues] = useState(issues);\n    const handlerChange = (e:any) => {\n        const id = +e.target.value;\n        const sprint = sprints.find(sprint => sprint.id === id)?.getIssues() || [];\n        setIssues(sprint);\n    }\n    return (\n        <div className=\"table\">\n                    <div style={{ width: 200}}>\n                        <Select placeholder=\"cambiar de sprint\" onChangeCapture={handlerChange}>\n                            { sprints.map( sprint => <option key={sprint.id} value={sprint.id}>{sprint.name}</option>) }\n                        </Select>\n                    </div>\n                    <Text mb=\"15px\">Historias del sprint</Text>\n                    <Text mb=\"8px\">Total de HU: { selectedIssues.length }</Text>\n                    <Table variant=\"simple\" id=\"table\">\n                        <Thead>\n                            <Tr>\n                            <Th>Tipo</Th>\n                            <Th>Historia</Th>\n                            <Th>Descripción</Th>\n                            </Tr>\n                        </Thead>\n                        <Tbody>\n                            { selectedIssues.map(issue => (\n                                <Tr key={ issue.id}>\n                                    <Td><Link href={issue.url}><img src={issue.icon}  alt={issue.type}/></Link></Td>\n                                    <Td><Link href={issue.url}>{issue.key}</Link></Td>\n                                    <Td>{issue.summary}</Td>\n                                </Tr>\n                            ))}\n                        </Tbody>\n                        </Table>\n                </div>\n    );\n}\n\n\ninterface Props {\n    issues: IssueModel[];\n    sprints: SprintModel[];\n}","import React from 'react';\nimport './App.css';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport Home from './presentation/pages/home/home';\n\nfunction App() {\n  return (\n    <ChakraProvider>\n    <Home></Home>\n  </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}