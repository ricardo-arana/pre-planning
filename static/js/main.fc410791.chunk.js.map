{"version":3,"sources":["design/components/atoms/navbar/navbar.tsx","infrastructure/dto/json.dto.ts","domain/entities/issue.model.ts","domain/entities/sprint.model.ts","presentation/pages/home/views/form-home.tsx","presentation/pages/home/views/select-sprint-home.tsx","presentation/pages/home/home.tsx","presentation/pages/home/views/table-home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","StatFieldID","PriorityName","Name","ColorName","Key","TypeName","IssueModel","id","key","summary","this","SprintModel","name","issues","issue","push","TransforJira","dto","sprints","forEach","issuesIds","data","filter","includes","newIssue","addIssue","FormHomeView","onChange","useState","value","setValue","mb","placeholder","rows","e","inputValue","target","colorScheme","size","style","marginTop","onClick","JSON","parse","sprintsDto","transfor","SelectSprintHome","onSelect","spacing","map","sprint","as","MdCheckCircle","color","Step","TableHome","length","variant","href","url","Home","form","step","setStep","setSprints","setIssues","selectSprint","getIssues","table","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc410791.chunk.js","sourcesContent":["import React from 'react';\nimport './navbar.scss';\n\nexport default function Navbar() {\n\n    return (\n        <>\n            <div className=\"navbar\">\n                <div className=\"navbar__title\">Pre plannig generator</div>\n            </div>\n        </>\n    );\n}","import { IssueModel } from \"../../domain/entities/issue.model\";\nimport { SprintModel } from \"../../domain/entities/sprint.model\";\n\nexport interface JiraData {\n    issues:                  Issue[];\n    rankCustomFieldId:       number;\n    sprints:                 Sprint[];\n    supportsPages:           boolean;\n    projects:                Project[];\n    canManageSprints:        boolean;\n    complexQuery:            boolean;\n    canCreateIssue:          boolean;\n    versionData:             VersionData;\n    hasBulkChangePermission: boolean;\n    isIssueLimitExceeded:    boolean;\n    issueParentAssociations: any[];\n}\n\nexport interface Issue {\n    id:                        number;\n    key:                       string;\n    hidden:                    boolean;\n    typeName:                  TypeName;\n    typeId:                    string;\n    summary:                   string;\n    typeUrl:                   string;\n    priorityUrl:               string;\n    priorityName:              PriorityName;\n    done:                      boolean;\n    assignee?:                 string;\n    assigneeKey?:              string;\n    assigneeAccountId?:        string;\n    assigneeName?:             string;\n    avatarUrl?:                string;\n    hasCustomUserAvatar:       boolean;\n    flagged:                   boolean;\n    estimateStatisticRequired: boolean;\n    estimateStatistic:         EstimateStatistic;\n    statusId:                  string;\n    statusName:                Name;\n    statusUrl:                 string;\n    status:                    Status;\n    fixVersions:               any[];\n    projectId:                 number;\n    linkedPagesCount:          number;\n    epic?:                     string;\n    epicField?:                EpicField;\n}\n\nexport interface EpicField {\n    id:            string;\n    label:         string;\n    editable:      boolean;\n    renderer:      string;\n    issueId:       number;\n    epicKey:       string;\n    epicColor:     string;\n    text:          string;\n    canRemoveEpic: boolean;\n}\n\nexport interface EstimateStatistic {\n    statFieldId:    StatFieldID;\n    statFieldValue: StatFieldValue;\n}\n\nexport enum StatFieldID {\n    Customfield10023 = \"customfield_10023\",\n}\n\nexport interface StatFieldValue {\n    text:   string;\n    value?: number;\n}\n\nexport enum PriorityName {\n    Media = \"Media\",\n}\n\nexport interface Status {\n    id:             string;\n    name:           Name;\n    description:    string;\n    iconUrl:        string;\n    statusCategory: StatusCategory;\n}\n\nexport enum Name {\n    EnProgreso = \"En Progreso\",\n    Finalizado = \"Finalizado\",\n    NoIniciado = \"No Iniciado\",\n    ReadyForTest = \"Ready for Test\",\n    Test = \"Test\",\n}\n\nexport interface StatusCategory {\n    id:        string;\n    key:       Key;\n    colorName: ColorName;\n}\n\nexport enum ColorName {\n    BlueGray = \"blue-gray\",\n    Green = \"green\",\n    Yellow = \"yellow\",\n}\n\nexport enum Key {\n    Done = \"done\",\n    Indeterminate = \"indeterminate\",\n    New = \"new\",\n}\n\nexport enum TypeName {\n    Error = \"Error\",\n    Historia = \"Historia\",\n    Mejora = \"Mejora\",\n    Tarea = \"Tarea\",\n}\n\nexport interface Project {\n    id:           number;\n    key:          string;\n    name:         string;\n    isSimplified: boolean;\n}\n\nexport interface Sprint {\n    id:               number;\n    sequence:         number;\n    name:             string;\n    state:            string;\n    linkedPagesCount: number;\n    goal:             string;\n    startDate:        string;\n    endDate:          string;\n    isoStartDate:     string;\n    isoEndDate:       string;\n    completeDate:     string;\n    isoCompleteDate:  string;\n    canUpdateSprint:  boolean;\n    remoteLinks:      any[];\n    daysRemaining:    number;\n    timeRemaining?:   TimeRemaining;\n    issuesIds:        number[];\n}\n\nexport interface TimeRemaining {\n    text:     string;\n    isFuture: boolean;\n}\n\nexport interface VersionData {\n    versionsPerProject: VersionsPerProject;\n    canCreateVersion:   boolean;\n}\n\nexport interface VersionsPerProject {\n}\n\n\nexport class TransforJira {\n\n    static transfor(dto: JiraData): SprintModel[] {\n        const sprints: SprintModel[] = [];\n        dto.sprints.forEach( ({id, name, issuesIds}) => {\n            const data = new SprintModel(\n                id,\n                name\n            );\n            dto.issues.filter( issue => issuesIds.includes(issue.id)).forEach( issue => {\n\n                const newIssue = new IssueModel(\n                    issue.id,\n                    issue.key,\n                    issue.summary,\n                );\n                data.addIssue(newIssue);\n            })\n\n            sprints.push(data);\n        })\n        return sprints;\n    }\n}","\nexport class IssueModel {\n\n    constructor(\n        public id: number,\n        public key: string,\n        public summary: string,\n    ) {}\n\n\n    get url(): string {\n        return `https://alicorpdigital.atlassian.net/browse/${this.key}`;\n    }\n}","import { IssueModel } from \"./issue.model\";\n\n\n\nexport class SprintModel {\n    \n    private issues: IssueModel[] = []; //TODO: colocar la verdadera instancia de issue\n\n    constructor(\n        public id:number,\n        public name: string\n    ) {}\n\n\n    addIssue(issue: IssueModel) {\n        this.issues.push(issue);\n    }\n\n    getIssues() {\n        return this.issues;\n    }\n}","import React, { useState } from 'react';\nimport { Textarea, Text } from \"@chakra-ui/react\"\nimport { Button } from \"@chakra-ui/react\"\nimport { SprintModel } from '../../../../domain/entities/sprint.model';\nimport { TransforJira } from '../../../../infrastructure/dto/json.dto';\n\n\nexport default function FormHomeView({onChange}: any) {\n\n    let [value, setValue] = useState('');\n    const handleValue = (e: any) => {\n        let inputValue = e.target.value\n        setValue(inputValue)\n    }\n\n    const handleContinue = () => {\n        const data = JSON.parse(value);\n        const sprintsDto: SprintModel[] = TransforJira.transfor(data);\n        onChange(sprintsDto)\n    }\n\n    return (\n        <div className=\"form\">\n             <Text mb=\"15px\">Ingrese el json de jira:</Text>\n              <Textarea placeholder=\"Ingresa aqui tu json\" rows={10}\n              value={value}\n              onChange={handleValue}\n              />\n              <Button colorScheme=\"blue\" size=\"lg\" style={ {marginTop: 20}} onClick={handleContinue} >\n                Continuar\n            </Button>\n          </div>\n    );\n}","import React from 'react';\nimport { Text, Link } from \"@chakra-ui/react\"\nimport { List, ListItem, ListIcon } from \"@chakra-ui/react\"\nimport { MdCheckCircle} from \"react-icons/md\";\nimport { SprintModel } from '../../../../domain/entities/sprint.model';\n\n\nexport default function SelectSprintHome({ sprints ,onSelect}: Props) {\n\n    return (\n        <div className=\"form\">\n                    <Text mb=\"15px\">Selecione el sprint</Text>\n                    <List spacing={3}>\n                    { sprints.map((sprint: SprintModel) => (\n                        <ListItem key={sprint.id}>\n                        <ListIcon as={MdCheckCircle} color=\"green.500\" />\n                          <Link onClick={ () => onSelect(sprint)}>{ sprint.name }</Link>\n                        </ListItem>\n                    ))}\n                    </List>\n                </div>\n    );\n}\n\ninterface Props {\n    sprints: SprintModel[];\n    onSelect: Function;\n}","import React, { useState } from \"react\";\nimport Navbar from \"../../../design/components/atoms/navbar/navbar\";\nimport \"./home.scss\";\nimport { SprintModel } from \"../../../domain/entities/sprint.model\";\nimport { IssueModel } from \"../../../domain/entities/issue.model\";\nimport FormHomeView from \"./views/form-home\";\nimport SelectSprintHome from \"./views/select-sprint-home\";\nimport TableHome from \"./views/table-home\";\n\nexport enum Step {\n    form,\n    selectSprint,\n    table\n}\n\nexport default function Home() {\n\n    let [step, setStep] = useState(Step.form);\n    let [sprints, setSprints] = useState<SprintModel[]>([]);\n    let [issues, setIssues] = useState<IssueModel[]>([]);\n\n    const handleContinue = (sprintsDto: SprintModel[]) => {\n        setSprints(sprintsDto);\n        setStep(Step.selectSprint);\n    }\n\n    const handleSelectSprint = (sprint: SprintModel) => {\n        setIssues(sprint.getIssues());\n        setStep(Step.table);\n\n    }\n  return (\n      <div className=\"home\">\n        <div className=\"home__navbar\">\n          <Navbar></Navbar>\n        </div>\n        <div className=\"home__content\">\n          {\n              (step === Step.form && \n                <FormHomeView onChange={handleContinue}/>\n              ) ||\n              ( step === Step.selectSprint &&\n                <SelectSprintHome sprints={sprints} onSelect={handleSelectSprint}/>\n              ) ||\n              ( step === Step.table &&\n                <TableHome issues={issues}/>\n              ) \n          }\n        </div>\n      </div>\n  );\n}\n","import React from 'react';\nimport { Text, Link, Table, Tbody, Td, Th, Thead, Tr } from \"@chakra-ui/react\"\nimport { IssueModel } from '../../../../domain/entities/issue.model';\n\n\nexport default function TableHome({issues}: Props) {\n\n    return (\n        <div className=\"table\">\n                    <Text mb=\"15px\">Historias del sprint</Text>\n                    <Text mb=\"8px\">Total de HU: { issues.length }</Text>\n                    <Table variant=\"simple\">\n                        <Thead>\n                            <Tr>\n                            <Th>HU</Th>\n                            <Th>Nombre HU</Th>\n                            </Tr>\n                        </Thead>\n                        <Tbody>\n                            { issues.map(issue => (\n                                <Tr key={ issue.id}>\n                                    <Td><Link href={issue.url}>{issue.key}</Link></Td>\n                                    <Td>{issue.summary}</Td>\n                                </Tr>\n                            ))}\n                        </Tbody>\n                        </Table>\n                </div>\n    );\n}\n\n\ninterface Props {\n    issues: IssueModel[];\n}","import React from 'react';\nimport './App.css';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport Home from './presentation/pages/home/home';\n\nfunction App() {\n  return (\n    <ChakraProvider>\n    <Home></Home>\n  </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}